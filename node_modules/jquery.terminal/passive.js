    // -----------------------------------------------------------------------
    var passive_events = false;
    if (is_browser) {
        (function() {
            // based on https://github.com/Modernizr/Modernizr
            try {
                var opts = Object.defineProperty({}, 'passive', {
                    get: function() {
                        passive_events = true;
                        return;
                    }
                });
                var noop = function () {};
                window.addEventListener('testPassiveEventSupport', noop, opts);
                window.removeEventListener('testPassiveEventSupport', noop, opts);
            } catch (e) {}
        })();
    }
    // -----------------------------------------------------------------------
    // jQuery plugins for pasive events (to improve performance)
    // -----------------------------------------------------------------------
    $.fn.add_event = function(name, fn) {
        if (passive_events) {
            console.log('pasive');
            return this.each(function() {
                var self = $(this);
                var __events__ = self.data('__event___');
                if (!__events__) {
                    __events__ = {};
                    self.data('__event___', __events__);
                }
                if (!__events__[name]) {
                    __events__[name] = [];
                }
                __events__[name].push(fn);
                this.addEventListener(name, fn, { passive: true });
            });
        } else {
            this.on(name, fn);
        }
    };
    // -----------------------------------------------------------------------
    $.fn.remove_event = function(name) {
        var self = this;
        function remove(name, fn) {
            if (typeof fn === 'array') {
                fn.forEach(function(fn) {
                    remove(name, fn);
                });
            } else {
                self.each(function() {
                    this.removeEventListener(name, fn, { passive: true });
                });
            }
        }
        if (passive_events) {
            var __events__ = self.data('__event___');
            if (name) {
                remove(name, __events__[name]);
                delete __events__[name];
            } else {
                Object.keys(__events__).forEach(function(name) {
                    remove(name, __events__[name]);
                });
                __events__ = {};
            }
        } else {
            this.off(name);
        }
    };
