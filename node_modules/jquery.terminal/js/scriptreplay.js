/**@license
 *       __ _____                     ________                              __
 *      / // _  /__ __ _____ ___ __ _/__  ___/__ ___ ______ __ __  __ ___  / /
 *  __ / // // // // // _  // _// // / / // _  // _//     // //  \/ // _ \/ /
 * /  / // // // // // ___// / / // / / // ___// / / / / // // /\  // // / /__
 * \___//____ \\___//____//_/ _\_  / /_//____//_/ /_/ /_//_//_/ /_/ \__\_\___/
 *           \/              /____/
 * http://terminal.jcubic.pl
 *
 * This is script for reply script recording, parser based on:
 * https://gitlab.mister-muffin.de/josch/scriptreplayjs
 *
 * Copyright (c) 2021 Jakub Jankiewicz <https://jcubic.pl/me>
 * Released under the MIT license
 *
 */
(function($) {

    const delay = (time) => {
        return new Promise(resolve => setTimeout(resolve, time));
    };

    function parse_data(script, timing, { write = () => {}, speed = 1.0 } = {}) {
        const len = script.indexOf("\n") + 1;
        let position = len;
        const line = script.substring(0, len);
        const chunks = [
            async function() {
                write(line);
            }
        ];
        return chunks.concat(timing.split('\n').map(function(line) {
            var [time, bytes] = line.split(' ');
            time = parseFloat(time);
            bytes = parseInt(bytes);
            const start = position;
            position += bytes;
            var pause_time = time * 1000 * (1 / speed);
            if (isFinite(time) && isFinite(bytes)) {
                const string = script.substring(start, start + bytes);
                return async function() {
                    await delay(pause_time);
                    write(string);
                };
            }
            const string = script.substring(start);
            return async function() {
                write(string);
            };
        }));
    }

    $.terminal.replay = function(script, timing, options) {
        var chunks = parse_data(script, timing, options);
        return {
            chunks,
            play: async function() {
                for (const chunk of chunks) {
                    await chunk();
                }
            }
        };
    };
})(jQuery);
