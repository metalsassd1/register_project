function delay(time) {
    return new Promise(resolve => {
        setTimeout(resolve, time);
    });
}

function parse_data(script, timing, { write = () => {}, speed = 1.0 } = {}) {
    var len = script.indexOf("\n") + 1;
    var position = len;
    var line = script.substring(0, len);
    var chunks = [
        async function() {
            write(line);
        }
    ];
    return chunks.concat(script.split('\n').map(async function(line) {
        var [time, bytes] = line.split(' ');
        bytes = parseInt(bytes);
        time = parseFloat(time);
        var string = script.substring(position, bytes);
        position += bytes;
        var pause_time = time * 1000 * (1 / speed);
        return async function() {
            write(string);
            await delay(pause_time);
        };
    }));
}

async function play(data) {
    for (const chunk of data) {
        await chunk();
    }
}
